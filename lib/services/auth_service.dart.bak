import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';

/// Service for handling Firebase Authentication operations
/// Provides secure login, logout, and session persistence
class AuthService {
  static final AuthService _instance = AuthService._internal();
  factory AuthService() => _instance;
  AuthService._internal();

  final FirebaseAuth _auth = FirebaseAuth.instance;

  /// Get the current authenticated user
  User? get currentUser => _auth.currentUser;

  /// Check if user is currently authenticated
  bool get isAuthenticated => _auth.currentUser != null;

  /// Stream of authentication state changes
  Stream<User?> get authStateChanges => _auth.authStateChanges();

  /// Initialize authentication service and set up persistence
  Future<void> initialize() async {
    try {
      // For web platforms, set persistence to LOCAL to maintain login across browser sessions
      if (kIsWeb) {
        await _auth.setPersistence(Persistence.LOCAL);
      }
      
      // Firebase Auth automatically handles persistence on mobile platforms
      debugPrint('AuthService initialized. Current user: ${currentUser?.email ?? 'None'}');
    } catch (e) {
      debugPrint('Error initializing AuthService: $e');
    }
  }

  /// Sign in with email and password
  Future<UserCredential?> signInWithEmailAndPassword({
    required String email,
    required String password,
  }) async {
    try {
      final UserCredential result = await _auth.signInWithEmailAndPassword(
        email: email.trim(),
        password: password,
      );
      
      debugPrint('User signed in: ${result.user?.email}');
      return result;
    } on FirebaseAuthException catch (e) {
      debugPrint('FirebaseAuth error: ${e.code} - ${e.message}');
      throw _handleAuthException(e);
    } catch (e) {
      debugPrint('Unexpected error during sign in: $e');
      throw Exception('An unexpected error occurred. Please try again.');
    }
  }

  /// Create new user account with email and password
  Future<UserCredential?> createUserWithEmailAndPassword({
    required String email,
    required String password,
  }) async {
    try {
      final UserCredential result = await _auth.createUserWithEmailAndPassword(
        email: email.trim(),
        password: password,
      );
      
      debugPrint('User account created: ${result.user?.email}');
      return result;
    } on FirebaseAuthException catch (e) {
      debugPrint('FirebaseAuth error: ${e.code} - ${e.message}');
      throw _handleAuthException(e);
    } catch (e) {
      debugPrint('Unexpected error during account creation: $e');
      throw Exception('An unexpected error occurred. Please try again.');
    }
  }

  /// Sign out the current user
  Future<void> signOut() async {
    try {
      await _auth.signOut();
      debugPrint('User signed out successfully');
    } catch (e) {
      debugPrint('Error signing out: $e');
      throw Exception('Error signing out. Please try again.');
    }
  }

  /// Send password reset email
  Future<void> sendPasswordResetEmail(String email) async {
    try {
      await _auth.sendPasswordResetEmail(email: email.trim());
      debugPrint('Password reset email sent to: $email');
    } on FirebaseAuthException catch (e) {
      debugPrint('Error sending password reset email: ${e.code} - ${e.message}');
      throw _handleAuthException(e);
    } catch (e) {
      debugPrint('Unexpected error sending password reset email: $e');
      throw Exception('An unexpected error occurred. Please try again.');
    }
  }

  /// Update user display name
  Future<void> updateDisplayName(String displayName) async {
    try {
      await currentUser?.updateDisplayName(displayName);
      await currentUser?.reload();
      debugPrint('Display name updated to: $displayName');
    } catch (e) {
      debugPrint('Error updating display name: $e');
      throw Exception('Error updating display name.');
    }
  }

  /// Delete current user account
  Future<void> deleteAccount() async {
    try {
      await currentUser?.delete();
      debugPrint('User account deleted');
    } on FirebaseAuthException catch (e) {
      debugPrint('Error deleting account: ${e.code} - ${e.message}');
      throw _handleAuthException(e);
    } catch (e) {
      debugPrint('Unexpected error deleting account: $e');
      throw Exception('An unexpected error occurred. Please try again.');
    }
  }

  /// Handle Firebase Auth exceptions and return user-friendly error messages
  Exception _handleAuthException(FirebaseAuthException e) {
    switch (e.code) {
      case 'user-not-found':
        return Exception('No user found with this email address.');
      case 'wrong-password':
        return Exception('Incorrect password. Please try again.');
      case 'email-already-in-use':
        return Exception('An account already exists with this email address.');
      case 'weak-password':
        return Exception('Password is too weak. Please choose a stronger password.');
      case 'invalid-email':
        return Exception('Please enter a valid email address.');
      case 'user-disabled':
        return Exception('This account has been disabled. Please contact support.');
      case 'too-many-requests':
        return Exception('Too many failed attempts. Please try again later.');
      case 'operation-not-allowed':
        return Exception('This sign-in method is not enabled. Please contact support.');
      case 'network-request-failed':
        return Exception('Network error. Please check your internet connection.');
      case 'requires-recent-login':
        return Exception('Please sign out and sign back in to perform this action.');
      default:
        return Exception('Authentication error: ${e.message ?? 'Unknown error'}');
    }
  }

  /// Get user info as a map (useful for debugging or logging)
  Map<String, dynamic> getUserInfo() {
    final user = currentUser;
    if (user == null) return {'authenticated': false};
    
    return {
      'authenticated': true,
      'uid': user.uid,
      'email': user.email,
      'displayName': user.displayName,
      'emailVerified': user.emailVerified,
      'creationTime': user.metadata.creationTime?.toIso8601String(),
      'lastSignInTime': user.metadata.lastSignInTime?.toIso8601String(),
    };
  }
}