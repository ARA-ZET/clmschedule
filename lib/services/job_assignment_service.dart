import '../models/distributor.dart';
import '../models/job.dart';
import '../models/job_list_item.dart';
import '../providers/schedule_provider.dart';

/// Service class responsible for automatically assigning jobs to distributors
/// based on their availability and index order
class JobAssignmentService {
  final ScheduleProvider scheduleProvider;

  JobAssignmentService(this.scheduleProvider);

  /// Rounds up man-days (2.3 â†’ 3)
  int roundUpManDays(double manDays) {
    return manDays.ceil();
  }

  /// Find distributors that don't have jobs assigned on a specific date
  List<Distributor> findAvailableDistributors(DateTime date) {
    final allDistributors = scheduleProvider.distributors;
    final jobsForDate = scheduleProvider.getJobsForDate(date);

    // Get IDs of distributors who already have jobs
    final assignedDistributorIds =
        jobsForDate.map((job) => job.distributorId).toSet();

    // Filter out assigned distributors and sort by index
    final availableDistributors = allDistributors
        .where(
            (distributor) => !assignedDistributorIds.contains(distributor.id))
        .toList();

    // Sort by index (lowest index first)
    availableDistributors.sort((a, b) => a.index.compareTo(b.index));

    return availableDistributors;
  }

  /// Calculate job assignments for a given number of man-days starting from a date
  List<JobAssignment> calculateJobAssignments({
    required String client,
    required double manDays,
    required DateTime startDate,
    String? workAreaId,
    String? workingArea,
  }) {
    final assignments = <JobAssignment>[];
    int remainingDays = roundUpManDays(manDays);
    DateTime currentDate = startDate;

    while (remainingDays > 0) {
      final availableDistributors = findAvailableDistributors(currentDate);

      if (availableDistributors.isEmpty) {
        // No available distributors for this date, move to next day
        currentDate =
            DateTime(currentDate.year, currentDate.month, currentDate.day + 1);
        continue;
      }

      // Assign jobs to available distributors (up to remaining days needed)
      final distributorsToAssign =
          availableDistributors.take(remainingDays).toList();

      for (final distributor in distributorsToAssign) {
        assignments.add(JobAssignment(
          client: client,
          distributorId: distributor.id,
          distributorName: distributor.name,
          date: currentDate,
          workAreaId: workAreaId ?? '', // Will be set to default or empty
          workingArea: workingArea ?? 'To be assigned', // Default placeholder
        ));
        remainingDays--;
      }

      // If we still have remaining days, move to next day
      if (remainingDays > 0) {
        currentDate =
            DateTime(currentDate.year, currentDate.month, currentDate.day + 1);
      }
    }

    return assignments;
  }

  /// Convert job assignments to actual Job objects
  List<Job> createJobsFromAssignments(List<JobAssignment> assignments) {
    return assignments
        .map((assignment) => Job(
              id: '', // Will be generated by Firestore
              client: assignment.client,
              workAreaId: assignment.workAreaId,
              workingArea: assignment.workingArea,
              distributorId: assignment.distributorId,
              date: assignment.date,
              status: JobStatus.scheduled,
            ))
        .toList();
  }

  /// Main method to create job assignments from a JobListItem
  Future<List<Job>> createJobAssignmentsFromJobList(
      JobListItem jobListItem) async {
    final assignments = calculateJobAssignments(
      client: jobListItem.client,
      manDays: jobListItem.manDays,
      startDate: jobListItem.date,
      // For now, we'll use default work area settings
      // These can be edited later on the schedule
      workAreaId: '',
      workingArea: 'To be assigned',
    );

    return createJobsFromAssignments(assignments);
  }
}

/// Data class representing a job assignment before it becomes a Job object
class JobAssignment {
  final String client;
  final String distributorId;
  final String distributorName;
  final DateTime date;
  final String workAreaId;
  final String workingArea;

  JobAssignment({
    required this.client,
    required this.distributorId,
    required this.distributorName,
    required this.date,
    required this.workAreaId,
    required this.workingArea,
  });

  @override
  String toString() {
    return 'JobAssignment(client: $client, distributor: $distributorName, date: $date)';
  }
}
